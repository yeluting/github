<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.springmvcGithub.dao.UserMapper">
  <resultMap id="BaseResultMap" type="cn.springmvcGithub.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="login" jdbcType="VARCHAR" property="login" />
    <result column="company" jdbcType="VARCHAR" property="company" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="fake" jdbcType="BIT" property="fake" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
    <result column="longs" jdbcType="DECIMAL" property="longs" />
    <result column="lat" jdbcType="DECIMAL" property="lat" />
    <result column="country_code" jdbcType="CHAR" property="countryCode" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="city" jdbcType="VARCHAR" property="city" />
    <result column="location" jdbcType="VARCHAR" property="location" />
  </resultMap>
  <sql id="Base_Column_List">
    id, login, company, created_at, type, fake, deleted, longs, lat, country_code, state, 
    city, location
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.springmvcGithub.model.User">
    insert into users (id, login, company, 
      created_at, type, fake, 
      deleted, longs, lat, country_code, 
      state, city, location
      )
    values (#{id,jdbcType=INTEGER}, #{login,jdbcType=VARCHAR}, #{company,jdbcType=VARCHAR}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{type,jdbcType=VARCHAR}, #{fake,jdbcType=BIT}, 
      #{deleted,jdbcType=BIT}, #{longs,jdbcType=DECIMAL}, #{lat,jdbcType=DECIMAL}, #{countryCode,jdbcType=CHAR}, 
      #{state,jdbcType=VARCHAR}, #{city,jdbcType=VARCHAR}, #{location,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.springmvcGithub.model.User">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="login != null">
        login,
      </if>
      <if test="company != null">
        company,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="fake != null">
        fake,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="longs != null">
        longs,
      </if>
      <if test="lat != null">
        lat,
      </if>
      <if test="countryCode != null">
        country_code,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="city != null">
        city,
      </if>
      <if test="location != null">
        location,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="login != null">
        #{login,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        #{company,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="fake != null">
        #{fake,jdbcType=BIT},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="longs != null">
        #{longs,jdbcType=DECIMAL},
      </if>
      <if test="lat != null">
        #{lat,jdbcType=DECIMAL},
      </if>
      <if test="countryCode != null">
        #{countryCode,jdbcType=CHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        #{city,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.springmvcGithub.model.User">
    update users
    <set>
      <if test="login != null">
        login = #{login,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        company = #{company,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="fake != null">
        fake = #{fake,jdbcType=BIT},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="longs != null">
        longs = #{longs,jdbcType=DECIMAL},
      </if>
      <if test="lat != null">
        lat = #{lat,jdbcType=DECIMAL},
      </if>
      <if test="countryCode != null">
        country_code = #{countryCode,jdbcType=CHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        city = #{city,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.springmvcGithub.model.User">
    update users
    set login = #{login,jdbcType=VARCHAR},
      company = #{company,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=VARCHAR},
      fake = #{fake,jdbcType=BIT},
      deleted = #{deleted,jdbcType=BIT},
      longs = #{longs,jdbcType=DECIMAL},
      lat = #{lat,jdbcType=DECIMAL},
      country_code = #{countryCode,jdbcType=CHAR},
      state = #{state,jdbcType=VARCHAR},
      city = #{city,jdbcType=VARCHAR},
      location = #{location,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getUserIdOffLim" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select id from users
    limit #{limit,jdbcType=INTEGER}
    offset #{offset,jdbcType=INTEGER}    
  </select>
</mapper>